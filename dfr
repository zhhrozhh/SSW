

locals()['self'].L = {}
def first_order_groth_exp(n):
    def rsr(df):
        window = np.array([np.exp(i/n) for i in range(n)])
        return df['Adj_Close'].rolling(window = n,center = False).apply(lambda x:np.corrcoef(x,window)[0][1])
    return rsr
locals()['self'].L[0] = first_order_groth_exp

def second_order_groth_exp(n):
    def rsr(df):
        window = np.array([np.exp(i/(n+1)) for i in range(n+1)])
        window = (window - np.roll(window,1))[1:]
        return df.Adj_Close.rolling(window = n+1, center = False).apply(lambda x:np.corrcoef((x-np.roll(x,1))[1:],window)[0][1])
    return rsr
locals()['self'].L[1] = second_order_groth_exp


def ta(n):
    def rsr(df):
        w = locals()
        try:
            return w['self'].L[0](n)(df)*1 + w['self'].L[1](n)(df)*0
        except Exception as e:
            print(w)
            print(e.__repr__())
    return rsr
locals()['self'].L[2] = ta
locals()['self'].func = self.L[2](12)
dt = locals()['self'].L[2](12)(G_var['DATAF']['Adj_Close'].dropna())
# print(dt.mean() )
# print(dt.std())
#print(G_var['DATAF']['Adj_Close'])#Adj_Close
# print(GA.first_order_groth_exp(20)(G_var['DATAF']['Adj_Close']))
print(dir())
print()